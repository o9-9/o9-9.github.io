---
import {Icon} from 'astro-iconify';
import MarkdownIt from 'markdown-it';
import Layout from '~/layouts/SimplePageLayout.astro';
import {fetchApps} from '~/utils/apps.js';

const parser = new MarkdownIt({
	html: true,
	linkify: true,
	typographer: true,
});

// TODO: Deduplicate between here and RSS.

export async function getStaticPaths() {
	const apps = await fetchApps({includeUnlisted: true});

	return apps
		.filter(app => app.releasesRepo)
		.map(app => ({
			params: {
				slug: app.slug,
			},
			props: {
				app,
			},
		}));
}

const {app} = Astro.props;
const {title: appTitle, slug, releasesRepo} = app;

const response = await fetch(`https://api.github.com/repos/sindresorhus/${releasesRepo}/releases`, {
	headers: {
		Accept: 'application/vnd.github.v3+json',
		...(import.meta.env.GITHUB_TOKEN ? {
			Authorization: `token ${import.meta.env.GITHUB_TOKEN}`,
		} : {}),
	},
});

let releases = await response.json();

releases = releases.filter(release => !release.draft && !release.prerelease);

const meta = {
	title: `Release Notes — ${appTitle} — Sindre Sorhus`,
	rssFeeds: [
		{
			title: `${appTitle} Release Notes`,
			href: `/${slug}/rss.xml`,
		},
	],
};
---

<Layout meta={meta}>
	<section class="pb-16">
		<div class="flex justify-between items-center mb-6">
			<a href={`/${slug}`} class="text-primary-600 hover:underline text-sm">
				← Back to {appTitle}
			</a>
			<a
				href={`/${slug}/rss.xml`}
				title="RSS feed for release notes"
				aria-label={`${appTitle} Release Notes RSS Feed`}
				class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
			>
				<Icon name="tabler:rss" class="w-4 h-4"/>
			</a>
		</div>
		<h1 class="text-3xl font-bold">Release Notes for {appTitle}</h1>
		{releases.map(release => (
			<article class="pb-4 pt-4">
				<div class="flex items-baseline gap-4">
					<h2 class="text-2xl font-bold">{release.tag_name.replace(/^v/, '')}</h2>
					<time class="text-gray-600 text-sm" datetime={release.published_at}>
						{new Date(release.published_at).toLocaleDateString(undefined, {
							year: 'numeric',
							month: 'long',
							day: 'numeric',
						})}
					</time>
				</div>
				{release.body && (
					<div set:html={parser.render(release.body)} />
				)}
			</article>
		))}
	</section>
</Layout>
